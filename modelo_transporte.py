# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_modelo_transporte', [dirname(__file__)])
        except ImportError:
            import _modelo_transporte
            return _modelo_transporte
        if fp is not None:
            try:
                _mod = imp.load_module('_modelo_transporte', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _modelo_transporte = swig_import_helper()
    del swig_import_helper
else:
    import _modelo_transporte
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class Params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["D"] = _modelo_transporte.Params_D_set
    __swig_getmethods__["D"] = _modelo_transporte.Params_D_get
    if _newclass:
        D = _swig_property(_modelo_transporte.Params_D_get, _modelo_transporte.Params_D_set)

    def __init__(self):
        this = _modelo_transporte.new_Params()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def Params_muestra(self):
        return _modelo_transporte.Params_Params_muestra(self)

    def Params_agrega(self, nuevo_nombre, nuevo_valor):
        return _modelo_transporte.Params_Params_agrega(self, nuevo_nombre, nuevo_valor)

    def Params_valor(self, nombre):
        return _modelo_transporte.Params_Params_valor(self, nombre)
    __swig_destroy__ = _modelo_transporte.delete_Params
    __del__ = lambda self: None
Params_swigregister = _modelo_transporte.Params_swigregister
Params_swigregister(Params)

class P_gipps(Params):
    __swig_setmethods__ = {}
    for _s in [Params]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P_gipps, name, value)
    __swig_getmethods__ = {}
    for _s in [Params]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, P_gipps, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p_gipps"] = _modelo_transporte.P_gipps_p_gipps_set
    __swig_getmethods__["p_gipps"] = _modelo_transporte.P_gipps_p_gipps_get
    if _newclass:
        p_gipps = _swig_property(_modelo_transporte.P_gipps_p_gipps_get, _modelo_transporte.P_gipps_p_gipps_set)

    def __init__(self):
        this = _modelo_transporte.new_P_gipps()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _modelo_transporte.delete_P_gipps
    __del__ = lambda self: None
P_gipps_swigregister = _modelo_transporte.P_gipps_swigregister
P_gipps_swigregister(P_gipps)

class trajectory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, trajectory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, trajectory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _modelo_transporte.new_trajectory(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def add(self, arg2):
        return _modelo_transporte.trajectory_add(self, arg2)

    def get(self, arg2):
        return _modelo_transporte.trajectory_get(self, arg2)

    def len(self):
        return _modelo_transporte.trajectory_len(self)

    def __getitem__(self, i):
        return _modelo_transporte.trajectory___getitem__(self, i)
    __swig_destroy__ = _modelo_transporte.delete_trajectory
    __del__ = lambda self: None
trajectory_swigregister = _modelo_transporte.trajectory_swigregister
trajectory_swigregister(trajectory)

class point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, point, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3, arg4, arg5, arg6):
        this = _modelo_transporte.new_point(arg2, arg3, arg4, arg5, arg6)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def set_accel(self, arg2):
        return _modelo_transporte.point_set_accel(self, arg2)

    def set_x(self, arg2):
        return _modelo_transporte.point_set_x(self, arg2)

    def set_lane(self, arg2):
        return _modelo_transporte.point_set_lane(self, arg2)

    def T(self):
        return _modelo_transporte.point_T(self)

    def X(self):
        return _modelo_transporte.point_X(self)

    def V(self):
        return _modelo_transporte.point_V(self)

    def A(self):
        return _modelo_transporte.point_A(self)

    def LANE(self):
        return _modelo_transporte.point_LANE(self)
    __swig_destroy__ = _modelo_transporte.delete_point
    __del__ = lambda self: None
point_swigregister = _modelo_transporte.point_swigregister
point_swigregister(point)

class gipps(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gipps, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gipps, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _modelo_transporte.new_gipps()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def accel(self, lider, follower, p):
        return _modelo_transporte.gipps_accel(self, lider, follower, p)

    def equil_spcg(self, leader, follower, p):
        return _modelo_transporte.gipps_equil_spcg(self, leader, follower, p)

    def wave_speed(self, leader, follower, p):
        return _modelo_transporte.gipps_wave_speed(self, leader, follower, p)

    def lch_left(self, leader, follower, new_leader, new_follower, p):
        return _modelo_transporte.gipps_lch_left(self, leader, follower, new_leader, new_follower, p)

    def lch_right(self, leader, follower, new_leader, new_follower, p):
        return _modelo_transporte.gipps_lch_right(self, leader, follower, new_leader, new_follower, p)
    __swig_destroy__ = _modelo_transporte.delete_gipps
    __del__ = lambda self: None
gipps_swigregister = _modelo_transporte.gipps_swigregister
gipps_swigregister(gipps)

class geometry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, geometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, geometry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _modelo_transporte.geometry_length_set
    __swig_getmethods__["length"] = _modelo_transporte.geometry_length_get
    if _newclass:
        length = _swig_property(_modelo_transporte.geometry_length_get, _modelo_transporte.geometry_length_set)
    __swig_setmethods__["lanes"] = _modelo_transporte.geometry_lanes_set
    __swig_getmethods__["lanes"] = _modelo_transporte.geometry_lanes_get
    if _newclass:
        lanes = _swig_property(_modelo_transporte.geometry_lanes_get, _modelo_transporte.geometry_lanes_set)
    __swig_setmethods__["merge"] = _modelo_transporte.geometry_merge_set
    __swig_getmethods__["merge"] = _modelo_transporte.geometry_merge_get
    if _newclass:
        merge = _swig_property(_modelo_transporte.geometry_merge_get, _modelo_transporte.geometry_merge_set)
    __swig_setmethods__["diverge"] = _modelo_transporte.geometry_diverge_set
    __swig_getmethods__["diverge"] = _modelo_transporte.geometry_diverge_get
    if _newclass:
        diverge = _swig_property(_modelo_transporte.geometry_diverge_get, _modelo_transporte.geometry_diverge_set)
    __swig_setmethods__["scope"] = _modelo_transporte.geometry_scope_set
    __swig_getmethods__["scope"] = _modelo_transporte.geometry_scope_get
    if _newclass:
        scope = _swig_property(_modelo_transporte.geometry_scope_get, _modelo_transporte.geometry_scope_set)

    def __init__(self, _length, _lanes, _merge, _diverge, _scope):
        this = _modelo_transporte.new_geometry(_length, _lanes, _merge, _diverge, _scope)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def Length(self):
        return _modelo_transporte.geometry_Length(self)

    def Lanes(self):
        return _modelo_transporte.geometry_Lanes(self)

    def Set_lanes(self, n):
        return _modelo_transporte.geometry_Set_lanes(self, n)

    def Merge(self):
        return _modelo_transporte.geometry_Merge(self)

    def Diverge(self):
        return _modelo_transporte.geometry_Diverge(self)

    def Scope(self):
        return _modelo_transporte.geometry_Scope(self)

    def Can_lch(self, x):
        return _modelo_transporte.geometry_Can_lch(self, x)

    def Set_merge(self, x):
        return _modelo_transporte.geometry_Set_merge(self, x)

    def Set_diverge(self, x):
        return _modelo_transporte.geometry_Set_diverge(self, x)
    __swig_destroy__ = _modelo_transporte.delete_geometry
    __del__ = lambda self: None
geometry_swigregister = _modelo_transporte.geometry_swigregister
geometry_swigregister(geometry)

class creator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, creator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, creator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def create(self, leader):
        return _modelo_transporte.creator_create(self, leader)

    def initial_state(self, leader):
        return _modelo_transporte.creator_initial_state(self, leader)
    __swig_destroy__ = _modelo_transporte.delete_creator
    __del__ = lambda self: None
creator_swigregister = _modelo_transporte.creator_swigregister
creator_swigregister(creator)

class fixed_state_creator(creator):
    __swig_setmethods__ = {}
    for _s in [creator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, fixed_state_creator, name, value)
    __swig_getmethods__ = {}
    for _s in [creator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, fixed_state_creator, name)
    __repr__ = _swig_repr

    def __init__(self, _Modelo, _spacing, _initial_speed):
        this = _modelo_transporte.new_fixed_state_creator(_Modelo, _spacing, _initial_speed)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def create(self, leader):
        return _modelo_transporte.fixed_state_creator_create(self, leader)

    def initial_state(self, leader):
        return _modelo_transporte.fixed_state_creator_initial_state(self, leader)
    __swig_destroy__ = _modelo_transporte.delete_fixed_state_creator
    __del__ = lambda self: None
fixed_state_creator_swigregister = _modelo_transporte.fixed_state_creator_swigregister
fixed_state_creator_swigregister(fixed_state_creator)

class fixed_demand_creator(creator):
    __swig_setmethods__ = {}
    for _s in [creator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, fixed_demand_creator, name, value)
    __swig_getmethods__ = {}
    for _s in [creator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, fixed_demand_creator, name)
    __repr__ = _swig_repr

    def __init__(self, _Modelo, _flow):
        this = _modelo_transporte.new_fixed_demand_creator(_Modelo, _flow)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def create(self, leader):
        return _modelo_transporte.fixed_demand_creator_create(self, leader)

    def initial_state(self, leader):
        return _modelo_transporte.fixed_demand_creator_initial_state(self, leader)
    __swig_destroy__ = _modelo_transporte.delete_fixed_demand_creator
    __del__ = lambda self: None
fixed_demand_creator_swigregister = _modelo_transporte.fixed_demand_creator_swigregister
fixed_demand_creator_swigregister(fixed_demand_creator)

class simulation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, simulation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, simulation, name)
    __repr__ = _swig_repr

    def __init__(self, _Model, tiempo, _geometry, _Creator, arg6, dt):
        this = _modelo_transporte.new_simulation(_Model, tiempo, _geometry, _Creator, arg6, dt)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def create_new_point(self, arg2, arg3):
        return _modelo_transporte.simulation_create_new_point(self, arg2, arg3)

    def create_leader_trajectory(self, ld_car, time):
        return _modelo_transporte.simulation_create_leader_trajectory(self, ld_car, time)

    def run(self):
        return _modelo_transporte.simulation_run(self)
    __swig_destroy__ = _modelo_transporte.delete_simulation
    __del__ = lambda self: None
simulation_swigregister = _modelo_transporte.simulation_swigregister
simulation_swigregister(simulation)

class ios_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _modelo_transporte.ios_base_erase_event
    imbue_event = _modelo_transporte.ios_base_imbue_event
    copyfmt_event = _modelo_transporte.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _modelo_transporte.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _modelo_transporte.ios_base_flags(self, *args)

    def setf(self, *args):
        return _modelo_transporte.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _modelo_transporte.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _modelo_transporte.ios_base_precision(self, *args)

    def width(self, *args):
        return _modelo_transporte.ios_base_width(self, *args)
    __swig_getmethods__["sync_with_stdio"] = lambda x: _modelo_transporte.ios_base_sync_with_stdio
    if _newclass:
        sync_with_stdio = staticmethod(_modelo_transporte.ios_base_sync_with_stdio)

    def imbue(self, __loc):
        return _modelo_transporte.ios_base_imbue(self, __loc)

    def getloc(self):
        return _modelo_transporte.ios_base_getloc(self)
    __swig_getmethods__["xalloc"] = lambda x: _modelo_transporte.ios_base_xalloc
    if _newclass:
        xalloc = staticmethod(_modelo_transporte.ios_base_xalloc)

    def iword(self, __ix):
        return _modelo_transporte.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _modelo_transporte.ios_base_pword(self, __ix)
    __swig_destroy__ = _modelo_transporte.delete_ios_base
    __del__ = lambda self: None
ios_base_swigregister = _modelo_transporte.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _modelo_transporte.cvar
ios_base.boolalpha = _modelo_transporte.cvar.ios_base_boolalpha
ios_base.dec = _modelo_transporte.cvar.ios_base_dec
ios_base.fixed = _modelo_transporte.cvar.ios_base_fixed
ios_base.hex = _modelo_transporte.cvar.ios_base_hex
ios_base.internal = _modelo_transporte.cvar.ios_base_internal
ios_base.left = _modelo_transporte.cvar.ios_base_left
ios_base.oct = _modelo_transporte.cvar.ios_base_oct
ios_base.right = _modelo_transporte.cvar.ios_base_right
ios_base.scientific = _modelo_transporte.cvar.ios_base_scientific
ios_base.showbase = _modelo_transporte.cvar.ios_base_showbase
ios_base.showpoint = _modelo_transporte.cvar.ios_base_showpoint
ios_base.showpos = _modelo_transporte.cvar.ios_base_showpos
ios_base.skipws = _modelo_transporte.cvar.ios_base_skipws
ios_base.unitbuf = _modelo_transporte.cvar.ios_base_unitbuf
ios_base.uppercase = _modelo_transporte.cvar.ios_base_uppercase
ios_base.adjustfield = _modelo_transporte.cvar.ios_base_adjustfield
ios_base.basefield = _modelo_transporte.cvar.ios_base_basefield
ios_base.floatfield = _modelo_transporte.cvar.ios_base_floatfield
ios_base.badbit = _modelo_transporte.cvar.ios_base_badbit
ios_base.eofbit = _modelo_transporte.cvar.ios_base_eofbit
ios_base.failbit = _modelo_transporte.cvar.ios_base_failbit
ios_base.goodbit = _modelo_transporte.cvar.ios_base_goodbit
ios_base.app = _modelo_transporte.cvar.ios_base_app
ios_base.ate = _modelo_transporte.cvar.ios_base_ate
ios_base.binary = _modelo_transporte.cvar.ios_base_binary
ios_base.ios_base_in = _modelo_transporte.cvar.ios_base_ios_base_in
ios_base.out = _modelo_transporte.cvar.ios_base_out
ios_base.trunc = _modelo_transporte.cvar.ios_base_trunc
ios_base.beg = _modelo_transporte.cvar.ios_base_beg
ios_base.cur = _modelo_transporte.cvar.ios_base_cur
ios_base.end = _modelo_transporte.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
    return _modelo_transporte.ios_base_sync_with_stdio(__sync)
ios_base_sync_with_stdio = _modelo_transporte.ios_base_sync_with_stdio

def ios_base_xalloc():
    return _modelo_transporte.ios_base_xalloc()
ios_base_xalloc = _modelo_transporte.ios_base_xalloc

class ios(ios_base):
    __swig_setmethods__ = {}
    for _s in [ios_base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr

    def rdstate(self):
        return _modelo_transporte.ios_rdstate(self)

    def clear(self, *args):
        return _modelo_transporte.ios_clear(self, *args)

    def setstate(self, __state):
        return _modelo_transporte.ios_setstate(self, __state)

    def good(self):
        return _modelo_transporte.ios_good(self)

    def eof(self):
        return _modelo_transporte.ios_eof(self)

    def fail(self):
        return _modelo_transporte.ios_fail(self)

    def bad(self):
        return _modelo_transporte.ios_bad(self)

    def exceptions(self, *args):
        return _modelo_transporte.ios_exceptions(self, *args)

    def __init__(self, __sb):
        this = _modelo_transporte.new_ios(__sb)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _modelo_transporte.delete_ios
    __del__ = lambda self: None

    def tie(self, *args):
        return _modelo_transporte.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _modelo_transporte.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _modelo_transporte.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _modelo_transporte.ios_fill(self, *args)

    def imbue(self, __loc):
        return _modelo_transporte.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _modelo_transporte.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _modelo_transporte.ios_widen(self, __c)
ios_swigregister = _modelo_transporte.ios_swigregister
ios_swigregister(ios)

class ostream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr

    def __init__(self, __sb):
        this = _modelo_transporte.new_ostream(__sb)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _modelo_transporte.delete_ostream
    __del__ = lambda self: None

    def __lshift__(self, *args):
        return _modelo_transporte.ostream___lshift__(self, *args)

    def put(self, __c):
        return _modelo_transporte.ostream_put(self, __c)

    def write(self, __s, __n):
        return _modelo_transporte.ostream_write(self, __s, __n)

    def flush(self):
        return _modelo_transporte.ostream_flush(self)

    def tellp(self):
        return _modelo_transporte.ostream_tellp(self)

    def seekp(self, *args):
        return _modelo_transporte.ostream_seekp(self, *args)
ostream_swigregister = _modelo_transporte.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr

    def __init__(self, __sb):
        this = _modelo_transporte.new_istream(__sb)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _modelo_transporte.delete_istream
    __del__ = lambda self: None

    def __rshift__(self, *args):
        return _modelo_transporte.istream___rshift__(self, *args)

    def gcount(self):
        return _modelo_transporte.istream_gcount(self)

    def get(self, *args):
        return _modelo_transporte.istream_get(self, *args)

    def getline(self, *args):
        return _modelo_transporte.istream_getline(self, *args)

    def ignore(self, *args):
        return _modelo_transporte.istream_ignore(self, *args)

    def peek(self):
        return _modelo_transporte.istream_peek(self)

    def read(self, __s, __n):
        return _modelo_transporte.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _modelo_transporte.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _modelo_transporte.istream_putback(self, __c)

    def unget(self):
        return _modelo_transporte.istream_unget(self)

    def sync(self):
        return _modelo_transporte.istream_sync(self)

    def tellg(self):
        return _modelo_transporte.istream_tellg(self)

    def seekg(self, *args):
        return _modelo_transporte.istream_seekg(self, *args)
istream_swigregister = _modelo_transporte.istream_swigregister
istream_swigregister(istream)

class iostream(istream, ostream):
    __swig_setmethods__ = {}
    for _s in [istream, ostream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream, ostream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr

    def __init__(self, __sb):
        this = _modelo_transporte.new_iostream(__sb)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _modelo_transporte.delete_iostream
    __del__ = lambda self: None
iostream_swigregister = _modelo_transporte.iostream_swigregister
iostream_swigregister(iostream)


_modelo_transporte.endl_cb_ptr_swigconstant(_modelo_transporte)
endl_cb_ptr = _modelo_transporte.endl_cb_ptr

def endl(arg1):
    return _modelo_transporte.endl(arg1)
endl = _modelo_transporte.endl

_modelo_transporte.ends_cb_ptr_swigconstant(_modelo_transporte)
ends_cb_ptr = _modelo_transporte.ends_cb_ptr

def ends(arg1):
    return _modelo_transporte.ends(arg1)
ends = _modelo_transporte.ends

_modelo_transporte.flush_cb_ptr_swigconstant(_modelo_transporte)
flush_cb_ptr = _modelo_transporte.flush_cb_ptr

def flush(arg1):
    return _modelo_transporte.flush(arg1)
flush = _modelo_transporte.flush
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modelo_transporte.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _modelo_transporte.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _modelo_transporte.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _modelo_transporte.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _modelo_transporte.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _modelo_transporte.SwigPyIterator_equal(self, x)

    def copy(self):
        return _modelo_transporte.SwigPyIterator_copy(self)

    def next(self):
        return _modelo_transporte.SwigPyIterator_next(self)

    def __next__(self):
        return _modelo_transporte.SwigPyIterator___next__(self)

    def previous(self):
        return _modelo_transporte.SwigPyIterator_previous(self)

    def advance(self, n):
        return _modelo_transporte.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _modelo_transporte.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _modelo_transporte.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _modelo_transporte.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _modelo_transporte.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _modelo_transporte.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _modelo_transporte.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _modelo_transporte.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class trajectories(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, trajectories, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, trajectories, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _modelo_transporte.trajectories_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _modelo_transporte.trajectories___nonzero__(self)

    def __bool__(self):
        return _modelo_transporte.trajectories___bool__(self)

    def __len__(self):
        return _modelo_transporte.trajectories___len__(self)

    def __getslice__(self, i, j):
        return _modelo_transporte.trajectories___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _modelo_transporte.trajectories___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _modelo_transporte.trajectories___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _modelo_transporte.trajectories___delitem__(self, *args)

    def __getitem__(self, *args):
        return _modelo_transporte.trajectories___getitem__(self, *args)

    def __setitem__(self, *args):
        return _modelo_transporte.trajectories___setitem__(self, *args)

    def pop(self):
        return _modelo_transporte.trajectories_pop(self)

    def append(self, x):
        return _modelo_transporte.trajectories_append(self, x)

    def empty(self):
        return _modelo_transporte.trajectories_empty(self)

    def size(self):
        return _modelo_transporte.trajectories_size(self)

    def swap(self, v):
        return _modelo_transporte.trajectories_swap(self, v)

    def begin(self):
        return _modelo_transporte.trajectories_begin(self)

    def end(self):
        return _modelo_transporte.trajectories_end(self)

    def rbegin(self):
        return _modelo_transporte.trajectories_rbegin(self)

    def rend(self):
        return _modelo_transporte.trajectories_rend(self)

    def clear(self):
        return _modelo_transporte.trajectories_clear(self)

    def get_allocator(self):
        return _modelo_transporte.trajectories_get_allocator(self)

    def pop_back(self):
        return _modelo_transporte.trajectories_pop_back(self)

    def erase(self, *args):
        return _modelo_transporte.trajectories_erase(self, *args)

    def __init__(self, *args):
        this = _modelo_transporte.new_trajectories(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _modelo_transporte.trajectories_push_back(self, x)

    def front(self):
        return _modelo_transporte.trajectories_front(self)

    def back(self):
        return _modelo_transporte.trajectories_back(self)

    def assign(self, n, x):
        return _modelo_transporte.trajectories_assign(self, n, x)

    def resize(self, *args):
        return _modelo_transporte.trajectories_resize(self, *args)

    def insert(self, *args):
        return _modelo_transporte.trajectories_insert(self, *args)

    def reserve(self, n):
        return _modelo_transporte.trajectories_reserve(self, n)

    def capacity(self):
        return _modelo_transporte.trajectories_capacity(self)
    __swig_destroy__ = _modelo_transporte.delete_trajectories
    __del__ = lambda self: None
trajectories_swigregister = _modelo_transporte.trajectories_swigregister
trajectories_swigregister(trajectories)

# This file is compatible with both classic and new-style classes.


